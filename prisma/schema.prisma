// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    email       String        @unique
    password    String
    profile     Profile
    Company     Company[]
    Interaction Interaction[]
    Case        Case[]
    Task        Task[]
    Comment     Comment[]
}

type Profile {
    firstName String
    lastName  String
}

model Customer {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    interactions Interaction[]
    companyIDs   String[]      @db.ObjectId
    companies    Company[]     @relation(fields: [companyIDs], references: [id])
    firstName    String
    lastName     String
    comments     Comment[]
    Case         Case?         @relation(fields: [caseId], references: [id])
    caseId       String?       @db.ObjectId
    Task         Task[]
}

model Company {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String
    customerIDs String[]   @db.ObjectId
    customers   Customer[] @relation(fields: [customerIDs], references: [id])
    User        User?      @relation(fields: [userId], references: [id])
    userId      String?    @db.ObjectId
    comments    Comment[]
    caseIDs     String[]   @db.ObjectId
    cases       Case[]     @relation(fields: [caseIDs], references: [id])
}

model Interaction {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User?           @relation(fields: [userId], references: [id])
    userId      String?         @db.ObjectId
    title       String
    description String
    type        InteractionType
    customer    Customer        @relation(fields: [customerId], references: [id])
    customerId  String          @db.ObjectId
    comments    Comment[]
    cases       Case[]          @relation(fields: [caseIDs], references: [id])
    caseIDs     String[]        @db.ObjectId
}

enum InteractionType {
    MEETING
    CALL
    EMAIL
    MESSAGE
}

model Case {
    id             String        @id @default(auto()) @map("_id") @db.ObjectId
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    createdBy      User?         @relation(fields: [userId], references: [id])
    userId         String?       @db.ObjectId
    companyIDs     String[]      @db.ObjectId
    companies      Company[]     @relation(fields: [companyIDs], references: [id])
    interactions   Interaction[] @relation(fields: [interactionIDs], references: [id])
    interactionIDs String[]      @db.ObjectId
    title          String
    description    String
    customers      Customer[]
    comments       Comment[]
}

model Comment {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    text          String
    createdBy     User         @relation(fields: [userId], references: [id])
    userId        String       @db.ObjectId
    Interaction   Interaction? @relation(fields: [interactionId], references: [id])
    interactionId String?      @db.ObjectId
    Customer      Customer?    @relation(fields: [customerId], references: [id])
    customerId    String?      @db.ObjectId
    Company       Company?     @relation(fields: [companyId], references: [id])
    companyId     String?      @db.ObjectId
    Case          Case?        @relation(fields: [caseId], references: [id])
    caseId        String?      @db.ObjectId
}

enum TaskStatus {
    TODO
    IN_PROGRESS
    COMPLETED
    CANCELED
}

enum TaskType {
    GENERAL
    FOLLOW_UP
    MEETING
    CALL
    EMAIL
}

model Task {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    title      String
    dueDate    DateTime?
    status     TaskStatus @default(TODO)
    type       TaskType   @default(GENERAL)
    assignedTo User?      @relation(fields: [userId], references: [id])
    userId     String?    @db.ObjectId
    Customer   Customer?  @relation(fields: [customerId], references: [id])
    customerId String?    @db.ObjectId
}
