// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id          String        @id @default(auto()) @map("_id") @db.ObjectId
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    email       String        @unique
    password    String
    profile     Profile
    Company     Company[]
    Interaction Interaction[]
}

type Profile {
    firstName String
    lastName  String
}

model Customer {
    id           String        @id @default(auto()) @map("_id") @db.ObjectId
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    interactions Interaction[]
    companyIDs   String[]      @db.ObjectId
    companies    Company[]     @relation(fields: [companyIDs], references: [id])
    firstName    String
    lastName     String
    comments     Comment[]
}

model Company {
    id          String     @id @default(auto()) @map("_id") @db.ObjectId
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    name        String
    customerIDs String[]   @db.ObjectId
    customers   Customer[] @relation(fields: [customerIDs], references: [id])
    User        User?      @relation(fields: [userId], references: [id])
    userId      String?    @db.ObjectId
    comments    Comment[]
}

model Interaction {
    id          String    @id @default(auto()) @map("_id") @db.ObjectId
    createdAt   DateTime  @default(now())
    createdBy   User?     @relation(fields: [userId], references: [id])
    userId      String?   @db.ObjectId
    updatedAt   DateTime  @updatedAt
    title       String
    description String
    customer    Customer  @relation(fields: [customerId], references: [id])
    customerId  String    @db.ObjectId
    comments    Comment[]
}

model Comment {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    text          String
    Interaction   Interaction? @relation(fields: [interactionId], references: [id])
    interactionId String?      @db.ObjectId
    Customer      Customer?    @relation(fields: [customerId], references: [id])
    customerId    String?      @db.ObjectId
    Company       Company?     @relation(fields: [companyId], references: [id])
    companyId     String?      @db.ObjectId
}
